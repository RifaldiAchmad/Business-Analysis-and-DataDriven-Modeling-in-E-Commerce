{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/RifaldiAchmad/Business-Analysis-and-DataDriven-Modeling-in-E-Commerce/blob/main/Klasifikasi\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **1. Import Library**"
      ],
      "metadata": {
        "id": "fKADPWcFKlj3"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Pada tahap ini, Anda perlu mengimpor beberapa pustaka (library) Python yang dibutuhkan untuk analisis data dan pembangunan model machine learning."
      ],
      "metadata": {
        "id": "LgA3ERnVn84N"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install bayesian-optimization"
      ],
      "metadata": {
        "id": "uioo_Vg9HkPI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "91c8247b-220d-4825-f804-79645841cb1f"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting bayesian-optimization\n",
            "  Downloading bayesian_optimization-2.0.3-py3-none-any.whl.metadata (9.0 kB)\n",
            "Collecting colorama<0.5.0,>=0.4.6 (from bayesian-optimization)\n",
            "  Downloading colorama-0.4.6-py2.py3-none-any.whl.metadata (17 kB)\n",
            "Requirement already satisfied: numpy>=1.25 in /usr/local/lib/python3.10/dist-packages (from bayesian-optimization) (1.26.4)\n",
            "Requirement already satisfied: scikit-learn<2.0.0,>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from bayesian-optimization) (1.6.0)\n",
            "Requirement already satisfied: scipy<2.0.0,>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from bayesian-optimization) (1.13.1)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn<2.0.0,>=1.0.0->bayesian-optimization) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn<2.0.0,>=1.0.0->bayesian-optimization) (3.5.0)\n",
            "Downloading bayesian_optimization-2.0.3-py3-none-any.whl (31 kB)\n",
            "Downloading colorama-0.4.6-py2.py3-none-any.whl (25 kB)\n",
            "Installing collected packages: colorama, bayesian-optimization\n",
            "Successfully installed bayesian-optimization-2.0.3 colorama-0.4.6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.model_selection import cross_val_score, StratifiedKFold\n",
        "from bayes_opt import BayesianOptimization\n",
        "from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score\n",
        "from sklearn.metrics import make_scorer, f1_score"
      ],
      "metadata": {
        "id": "j4fO_fsQHm6F"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **2. Memuat Dataset dari Hasil Clustering**"
      ],
      "metadata": {
        "id": "f3YIEnAFKrKL"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Memuat dataset hasil clustering dari file CSV ke dalam variabel DataFrame."
      ],
      "metadata": {
        "id": "Ey3ItwTen_7E"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('https://raw.githubusercontent.com/RifaldiAchmad/Business-Analysis-and-DataDriven-Modeling-in-E-Commerce/refs/heads/main/modelling/data_hasil.csv')\n",
        "df"
      ],
      "metadata": {
        "id": "GHCGNTyrM5fS",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "outputId": "0d443d55-05b6-473b-c7ff-d93978e7d1f8"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      payment_type  product_category  RFM_score  price_group  recency_group  \\\n",
              "0         0.136196          0.490381  -0.587003    -0.928713       0.845090   \n",
              "1        -1.424628          0.490381   0.863228     1.157680      -0.000906   \n",
              "2         0.136196          0.490381  -1.733697    -0.928713       0.845090   \n",
              "3         0.136196          0.490381   0.694597     1.157680       0.845090   \n",
              "4        -1.424628          0.490381   1.290428    -0.928713      -0.846902   \n",
              "...            ...               ...        ...          ...            ...   \n",
              "1863     -1.424628          0.490381   0.672113     1.157680      -1.692898   \n",
              "1864      0.136196          0.490381   0.975649     0.114484      -1.692898   \n",
              "1865      0.136196          0.490381   0.919439     1.157680       0.845090   \n",
              "1866      0.136196          0.490381  -0.901781    -0.928713      -1.692898   \n",
              "1867      0.136196         -1.680309  -1.351465    -0.928713      -1.692898   \n",
              "\n",
              "      monetary_group  score_group  cluster  \n",
              "0          -1.103844     0.823300        1  \n",
              "1           1.113339     0.823300        0  \n",
              "2          -1.103844    -0.969153        1  \n",
              "3           1.113339    -0.072926        0  \n",
              "4           1.113339     0.823300        0  \n",
              "...              ...          ...      ...  \n",
              "1863        1.113339    -0.072926        0  \n",
              "1864        0.004748     0.823300        0  \n",
              "1865        1.113339    -1.865380        0  \n",
              "1866       -1.103844     0.823300        1  \n",
              "1867       -1.103844    -0.072926        1  \n",
              "\n",
              "[1868 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-27672741-72a8-42ce-931f-e1321c07dc76\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>payment_type</th>\n",
              "      <th>product_category</th>\n",
              "      <th>RFM_score</th>\n",
              "      <th>price_group</th>\n",
              "      <th>recency_group</th>\n",
              "      <th>monetary_group</th>\n",
              "      <th>score_group</th>\n",
              "      <th>cluster</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.136196</td>\n",
              "      <td>0.490381</td>\n",
              "      <td>-0.587003</td>\n",
              "      <td>-0.928713</td>\n",
              "      <td>0.845090</td>\n",
              "      <td>-1.103844</td>\n",
              "      <td>0.823300</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-1.424628</td>\n",
              "      <td>0.490381</td>\n",
              "      <td>0.863228</td>\n",
              "      <td>1.157680</td>\n",
              "      <td>-0.000906</td>\n",
              "      <td>1.113339</td>\n",
              "      <td>0.823300</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.136196</td>\n",
              "      <td>0.490381</td>\n",
              "      <td>-1.733697</td>\n",
              "      <td>-0.928713</td>\n",
              "      <td>0.845090</td>\n",
              "      <td>-1.103844</td>\n",
              "      <td>-0.969153</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.136196</td>\n",
              "      <td>0.490381</td>\n",
              "      <td>0.694597</td>\n",
              "      <td>1.157680</td>\n",
              "      <td>0.845090</td>\n",
              "      <td>1.113339</td>\n",
              "      <td>-0.072926</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-1.424628</td>\n",
              "      <td>0.490381</td>\n",
              "      <td>1.290428</td>\n",
              "      <td>-0.928713</td>\n",
              "      <td>-0.846902</td>\n",
              "      <td>1.113339</td>\n",
              "      <td>0.823300</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1863</th>\n",
              "      <td>-1.424628</td>\n",
              "      <td>0.490381</td>\n",
              "      <td>0.672113</td>\n",
              "      <td>1.157680</td>\n",
              "      <td>-1.692898</td>\n",
              "      <td>1.113339</td>\n",
              "      <td>-0.072926</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1864</th>\n",
              "      <td>0.136196</td>\n",
              "      <td>0.490381</td>\n",
              "      <td>0.975649</td>\n",
              "      <td>0.114484</td>\n",
              "      <td>-1.692898</td>\n",
              "      <td>0.004748</td>\n",
              "      <td>0.823300</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1865</th>\n",
              "      <td>0.136196</td>\n",
              "      <td>0.490381</td>\n",
              "      <td>0.919439</td>\n",
              "      <td>1.157680</td>\n",
              "      <td>0.845090</td>\n",
              "      <td>1.113339</td>\n",
              "      <td>-1.865380</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1866</th>\n",
              "      <td>0.136196</td>\n",
              "      <td>0.490381</td>\n",
              "      <td>-0.901781</td>\n",
              "      <td>-0.928713</td>\n",
              "      <td>-1.692898</td>\n",
              "      <td>-1.103844</td>\n",
              "      <td>0.823300</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1867</th>\n",
              "      <td>0.136196</td>\n",
              "      <td>-1.680309</td>\n",
              "      <td>-1.351465</td>\n",
              "      <td>-0.928713</td>\n",
              "      <td>-1.692898</td>\n",
              "      <td>-1.103844</td>\n",
              "      <td>-0.072926</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1868 rows × 8 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-27672741-72a8-42ce-931f-e1321c07dc76')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-27672741-72a8-42ce-931f-e1321c07dc76 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-27672741-72a8-42ce-931f-e1321c07dc76');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-08d9130f-af40-46e1-ae09-316a867b4e68\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-08d9130f-af40-46e1-ae09-316a867b4e68')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-08d9130f-af40-46e1-ae09-316a867b4e68 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_8017a538-e57d-48ae-b564-635a3977a309\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_8017a538-e57d-48ae-b564-635a3977a309 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 1868,\n  \"fields\": [\n    {\n      \"column\": \"payment_type\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0002677734684364,\n        \"min\": -1.4246279965009438,\n        \"max\": 3.257844315752012,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          -1.4246279965009438,\n          1.6970202116676931,\n          0.1361961075833747\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"product_category\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0002677734684509,\n        \"min\": -3.850997981306819,\n        \"max\": 0.4903805516329141,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0.4903805516329141,\n          -1.6803087148369524,\n          -3.850997981306819\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RFM_score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0002677734684486,\n        \"min\": -2.059717760659997,\n        \"max\": 1.8750175076989444,\n        \"num_unique_values\": 329,\n        \"samples\": [\n          0.2561549972884082,\n          -0.3846447464157621,\n          1.0768283532604164\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price_group\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0002677734684327,\n        \"min\": -0.9287130983519551,\n        \"max\": 1.15768024827637,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          -0.9287130983519551,\n          1.15768024827637,\n          0.1144835749622073\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"recency_group\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0002677734684484,\n        \"min\": -1.6928979753230553,\n        \"max\": 0.8450903215497116,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          -0.0009057774078773,\n          -1.6928979753230553,\n          0.8450903215497116\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"monetary_group\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0002677734684609,\n        \"min\": -1.1038437650384596,\n        \"max\": 1.1133391952753495,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          -1.1038437650384596,\n          1.1133391952753495,\n          0.004747715118445\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"score_group\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0002677734684544,\n        \"min\": -1.8653801534609948,\n        \"max\": 0.8233004998300067,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          -0.969153269030661,\n          -1.8653801534609948,\n          0.8233004998300067\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cluster\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Data yang sudah jadi (scaling, encoding, binning) di labeli cluster lalu dipakai untuk training tugas klasifikasi."
      ],
      "metadata": {
        "id": "sys3fc6WvfPj"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **3. Data Splitting**"
      ],
      "metadata": {
        "id": "KkPem5eWL2UP"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Tahap Data Splitting bertujuan untuk memisahkan dataset menjadi dua bagian: data latih (training set) dan data uji (test set)."
      ],
      "metadata": {
        "id": "YYj1rl_JNI9Y"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X = df.drop(columns='cluster')\n",
        "y = df['cluster']\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)"
      ],
      "metadata": {
        "id": "OubAW-7ONKVj"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Split data untuk train dan test 70:30"
      ],
      "metadata": {
        "id": "0r1LNsyQvzQI"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **4. Membangun Model Klasifikasi**\n"
      ],
      "metadata": {
        "id": "IVPbB03CMhTT"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **a. Membangun Model Klasifikasi**"
      ],
      "metadata": {
        "id": "Ned1pL9zMmBK"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Setelah memilih algoritma klasifikasi yang sesuai, langkah selanjutnya adalah melatih model menggunakan data latih."
      ],
      "metadata": {
        "id": "WAWzPOE4Nkti"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lr = LogisticRegression().fit(X_train, y_train)\n",
        "knn = KNeighborsClassifier().fit(X_train, y_train)\n",
        "\n",
        "print(\"Done.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VtCYLG5fxPRC",
        "outputId": "be4c9df5-db9a-436b-fb31-ee8674c4f550"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Done.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Model Regresi Logistik dan KNN merupakan contoh model terbaik untuk klasifikasi biner dengan data kecil. Regresi Logistik efektif untuk hubungan linier, memberikan interpretasi yang jelas, dan tahan terhadap overfitting dengan regularisasi. Sedangkan KNN lebih fleksibel untuk pola non-linier dan bekerja baik meskipun data terbatas dengan syarat nilai K dipilih dengan tepat. Kedua model ini cocok karena kesederhanaannya dan kemampuan untuk bekerja dengan baik meskipun jumlah data terbatas."
      ],
      "metadata": {
        "id": "seYoHNY3XU1y"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **b. Evaluasi Model Klasifikasi**"
      ],
      "metadata": {
        "id": "ergzChZFEL-O"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Berikut adalah **rekomendasi** tahapannya.\n",
        "1. Lakukan prediksi menggunakan data uji.\n",
        "2. Hitung metrik evaluasi seperti Accuracy dan F1-Score (Opsional: Precision dan Recall).\n",
        "3. Buat confusion matrix untuk melihat detail prediksi benar dan salah."
      ],
      "metadata": {
        "id": "zOm68u-7NpLT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Prediksi menggunakan model Logistic Regression untuk data train dan test\n",
        "y_train_pred_lr = lr.predict(X_train)\n",
        "y_test_pred_lr = lr.predict(X_test)\n",
        "\n",
        "# Evaluasi model pada data train\n",
        "accuracy_train_lr = accuracy_score(y_train, y_train_pred_lr)\n",
        "precision_train_lr = precision_score(y_train, y_train_pred_lr, average='weighted')\n",
        "recall_train_lr = recall_score(y_train, y_train_pred_lr, average='weighted')\n",
        "f1_train_lr = f1_score(y_train, y_train_pred_lr, average='weighted')\n",
        "\n",
        "# Evaluasi model pada data test\n",
        "accuracy_test_lr = accuracy_score(y_test, y_test_pred_lr)\n",
        "precision_test_lr = precision_score(y_test, y_test_pred_lr, average='weighted')\n",
        "recall_test_lr = recall_score(y_test, y_test_pred_lr, average='weighted')\n",
        "f1_test_lr = f1_score(y_test, y_test_pred_lr, average='weighted')\n",
        "\n",
        "# Print hasil evaluasi\n",
        "print(\"Logistic Regression - Train Data:\")\n",
        "print(f\"Accuracy: {accuracy_train_lr}\")\n",
        "print(f\"Precision: {precision_train_lr}\")\n",
        "print(f\"Recall: {recall_train_lr}\")\n",
        "print(f\"F1-score: {f1_train_lr}\\n\")\n",
        "\n",
        "print(\"Logistic Regression - Test Data:\")\n",
        "print(f\"Accuracy: {accuracy_test_lr}\")\n",
        "print(f\"Precision: {precision_test_lr}\")\n",
        "print(f\"Recall: {recall_test_lr}\")\n",
        "print(f\"F1-score: {f1_test_lr}\\n\")\n",
        "\n",
        "# Confusion Matrix untuk Test data\n",
        "cm_lr_test = confusion_matrix(y_test, y_test_pred_lr)\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.heatmap(cm_lr_test, annot=True, fmt='d', cmap='Blues')\n",
        "plt.title('Confusion Matrix - Logistic Regression (Test Data)')\n",
        "plt.xlabel('Predicted')\n",
        "plt.ylabel('Actual')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 772
        },
        "id": "bjw-UaBPxh1L",
        "outputId": "e88e2f31-5c5e-4c4a-ba36-a378f61c9f5e"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Logistic Regression - Train Data:\n",
            "Accuracy: 0.9992348890589136\n",
            "Precision: 0.9992358662120949\n",
            "Recall: 0.9992348890589136\n",
            "F1-score: 0.9992347688174404\n",
            "\n",
            "Logistic Regression - Test Data:\n",
            "Accuracy: 1.0\n",
            "Precision: 1.0\n",
            "Recall: 1.0\n",
            "F1-score: 1.0\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "* Model menunjukkan kinerja yang sangat baik pada data train, hampir sempurna. Ini berarti model dapat memprediksi kelas dengan sangat akurat pada data pelatihan.\n",
        "* Model juga memberikan hasil sempurna pada data test. Semua metrik (accuracy, precision, recall, F1-score) menunjukkan 1.0, yang berarti model memprediksi semua data dengan benar pada data yang belum terlihat sebelumnya.\n",
        "* Tidak ada false positives atau false negatives. Semua data diklasifikasikan dengan benar, baik kelas 0 (321 prediksi benar) maupun kelas 1 (240 prediksi benar)."
      ],
      "metadata": {
        "id": "3J9liGPzCG5Z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Prediksi menggunakan model K-Nearest Neighbors untuk data train dan test\n",
        "y_train_pred_knn = knn.predict(X_train)\n",
        "y_test_pred_knn = knn.predict(X_test)\n",
        "\n",
        "# Evaluasi model pada data train\n",
        "accuracy_train_knn = accuracy_score(y_train, y_train_pred_knn)\n",
        "precision_train_knn = precision_score(y_train, y_train_pred_knn, average='weighted')\n",
        "recall_train_knn = recall_score(y_train, y_train_pred_knn, average='weighted')\n",
        "f1_train_knn = f1_score(y_train, y_train_pred_knn, average='weighted')\n",
        "\n",
        "# Evaluasi model pada data test\n",
        "accuracy_test_knn = accuracy_score(y_test, y_test_pred_knn)\n",
        "precision_test_knn = precision_score(y_test, y_test_pred_knn, average='weighted')\n",
        "recall_test_knn = recall_score(y_test, y_test_pred_knn, average='weighted')\n",
        "f1_test_knn = f1_score(y_test, y_test_pred_knn, average='weighted')\n",
        "\n",
        "# Print hasil evaluasi\n",
        "print(\"K-Nearest Neighbors - Train Data:\")\n",
        "print(f\"Accuracy: {accuracy_train_knn}\")\n",
        "print(f\"Precision: {precision_train_knn}\")\n",
        "print(f\"Recall: {recall_train_knn}\")\n",
        "print(f\"F1-score: {f1_train_knn}\\n\")\n",
        "\n",
        "print(\"K-Nearest Neighbors - Test Data:\")\n",
        "print(f\"Accuracy: {accuracy_test_knn}\")\n",
        "print(f\"Precision: {precision_test_knn}\")\n",
        "print(f\"Recall: {recall_test_knn}\")\n",
        "print(f\"F1-score: {f1_test_knn}\\n\")\n",
        "\n",
        "# Confusion Matrix untuk Test data\n",
        "cm_knn_test = confusion_matrix(y_test, y_test_pred_knn)\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.heatmap(cm_knn_test, annot=True, fmt='d', cmap='Blues')\n",
        "plt.title('Confusion Matrix - K-Nearest Neighbors (Test Data)')\n",
        "plt.xlabel('Predicted')\n",
        "plt.ylabel('Actual')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 772
        },
        "id": "kGkq0JdPygjr",
        "outputId": "81ae524d-ba4b-4f3c-ac60-0f4e8d478518"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "K-Nearest Neighbors - Train Data:\n",
            "Accuracy: 0.9992348890589136\n",
            "Precision: 0.9992358662120949\n",
            "Recall: 0.9992348890589136\n",
            "F1-score: 0.9992347688174404\n",
            "\n",
            "K-Nearest Neighbors - Test Data:\n",
            "Accuracy: 0.9982174688057041\n",
            "Precision: 0.9982248652007013\n",
            "Recall: 0.9982174688057041\n",
            "F1-score: 0.9982179313187848\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "* Kedua model menunjukkan kinerja yang sangat baik pada data train dengan nilai evaluasi yang hampir sempurna. Tidak ada perbedaan signifikan antara kedua model pada data ini.\n",
        "* Logistic Regression menunjukkan performa sempurna pada data test dengan nilai 1.0 di semua metrik evaluasi, yang berarti model berhasil mengklasifikasikan semua data dengan benar tanpa kesalahan. Ini bisa menunjukkan bahwa model sangat mengoptimalkan performa pada data yang tidak terlihat sebelumnya.\n",
        "* Meskipun KNN menunjukkan performa sangat tinggi, namun sedikit lebih rendah daripada Logistic Regression pada data test. Perbedaan ini mungkin disebabkan oleh overfitting ringan pada data train, karena KNN cenderung lebih sensitif terhadap data train dan lebih mudah dipengaruhi oleh noise dan fluktuasi data.\n",
        "* Tidak ada kesalahan klasifikasi sama sekali pada data test model Logistic Regression. Namun, pada data test model KNN terdapat 1 false positive (kelas 0 salah diprediksi sebagai kelas 1). Meskipun sangat baik, ini menunjukkan bahwa KNN sedikit lebih sensitif terhadap noise atau mungkin ada kesalahan dalam memprediksi kelas 0.\n",
        "* Logistic Regression terlihat lebih stabil dan generalizable pada data test yang lebih kecil, sementara KNN lebih rentan terhadap overfitting atau sensitif terhadap noise dalam data train."
      ],
      "metadata": {
        "id": "H4_9OwrsXZlz"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **c. Tuning Model Klasifikasi (Optional)**"
      ],
      "metadata": {
        "id": "ph9yIYDXEPuB"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Gunakan GridSearchCV, RandomizedSearchCV, atau metode lainnya untuk mencari kombinasi hyperparameter terbaik"
      ],
      "metadata": {
        "id": "-Bikx3LINv5e"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Fungsi untuk evaluasi model Logistic Regression dengan cross-validation\n",
        "def logistic_regression_cv(C, penalty):\n",
        "    # Konversi parameter penalty ke bentuk string\n",
        "    penalty = 'l2' if int(penalty) == 2 else 'l1'\n",
        "    C = float(C)\n",
        "\n",
        "    # Inisialisasi model Logistic Regression\n",
        "    logreg_model = LogisticRegression(\n",
        "        C=C,\n",
        "        penalty=penalty,\n",
        "        solver='liblinear',  # Solver yang mendukung penalti L1 dan L2\n",
        "        max_iter=1000,\n",
        "        random_state=42,\n",
        "        class_weight='balanced'\n",
        "    )\n",
        "\n",
        "    # Stratified K-Fold\n",
        "    stratified_kf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n",
        "\n",
        "    # Hitung skor cross-validation\n",
        "    scores = cross_val_score(logreg_model, X_train, y_train, cv=stratified_kf, scoring=make_scorer(f1_score, average='weighted'))\n",
        "    return scores.mean()\n",
        "\n",
        "# Inisialisasi Bayesian Optimization\n",
        "pbounds = {'C': (0.01, 10), 'penalty': (1, 2)}  # 1 untuk L1, 2 untuk L2\n",
        "optimizer_logreg = BayesianOptimization(f=logistic_regression_cv, pbounds=pbounds, random_state=42, verbose=2)\n",
        "\n",
        "# Optimasi\n",
        "optimizer_logreg.maximize(init_points=5, n_iter=20)\n",
        "\n",
        "# Dapatkan parameter terbaik\n",
        "best_params_logreg = optimizer_logreg.max['params']\n",
        "best_C = float(best_params_logreg['C'])\n",
        "best_penalty = 'l2' if int(best_params_logreg['penalty']) == 2 else 'l1'\n",
        "\n",
        "print(f\"Best Parameters: C={best_C}, penalty={best_penalty}\")\n",
        "\n",
        "# Latih model Logistic Regression dengan parameter terbaik\n",
        "best_model_lr = LogisticRegression(\n",
        "    C=best_C,\n",
        "    penalty=best_penalty,\n",
        "    solver='liblinear',\n",
        "    max_iter=1000,\n",
        "    random_state=42,\n",
        "    class_weight='balanced'\n",
        ")\n",
        "best_model_lr.fit(X_train, y_train)"
      ],
      "metadata": {
        "id": "winbFzb8NL95",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 602
        },
        "outputId": "9cb33e8e-fd7b-4753-baa3-e5f6fc9d8d90"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "|   iter    |  target   |     C     |  penalty  |\n",
            "-------------------------------------------------\n",
            "| \u001b[39m1        \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m3.752    \u001b[39m | \u001b[39m1.951    \u001b[39m |\n",
            "| \u001b[39m2        \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m7.323    \u001b[39m | \u001b[39m1.599    \u001b[39m |\n",
            "| \u001b[39m3        \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m1.569    \u001b[39m | \u001b[39m1.156    \u001b[39m |\n",
            "| \u001b[39m4        \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m0.5903   \u001b[39m | \u001b[39m1.866    \u001b[39m |\n",
            "| \u001b[39m5        \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m6.015    \u001b[39m | \u001b[39m1.708    \u001b[39m |\n",
            "| \u001b[39m6        \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m9.986    \u001b[39m | \u001b[39m1.025    \u001b[39m |\n",
            "| \u001b[39m7        \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m9.996    \u001b[39m | \u001b[39m1.034    \u001b[39m |\n",
            "| \u001b[39m8        \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m1.023    \u001b[39m | \u001b[39m1.522    \u001b[39m |\n",
            "| \u001b[39m9        \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m0.01539  \u001b[39m | \u001b[39m1.925    \u001b[39m |\n",
            "| \u001b[39m10       \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m6.679    \u001b[39m | \u001b[39m1.642    \u001b[39m |\n",
            "| \u001b[39m11       \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m9.99     \u001b[39m | \u001b[39m1.054    \u001b[39m |\n",
            "| \u001b[39m12       \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m0.01724  \u001b[39m | \u001b[39m1.06     \u001b[39m |\n",
            "| \u001b[39m13       \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m9.992    \u001b[39m | \u001b[39m1.996    \u001b[39m |\n",
            "| \u001b[39m14       \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m3.957    \u001b[39m | \u001b[39m1.487    \u001b[39m |\n",
            "| \u001b[39m15       \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m6.905    \u001b[39m | \u001b[39m1.122    \u001b[39m |\n",
            "| \u001b[39m16       \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m6.045    \u001b[39m | \u001b[39m1.152    \u001b[39m |\n",
            "| \u001b[39m17       \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m0.01101  \u001b[39m | \u001b[39m1.964    \u001b[39m |\n",
            "| \u001b[39m18       \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m4.2      \u001b[39m | \u001b[39m1.165    \u001b[39m |\n",
            "| \u001b[39m19       \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m1.159    \u001b[39m | \u001b[39m1.198    \u001b[39m |\n",
            "| \u001b[39m20       \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m9.996    \u001b[39m | \u001b[39m1.057    \u001b[39m |\n",
            "| \u001b[39m21       \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m9.986    \u001b[39m | \u001b[39m1.952    \u001b[39m |\n",
            "| \u001b[39m22       \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m0.0153   \u001b[39m | \u001b[39m1.951    \u001b[39m |\n",
            "| \u001b[39m23       \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m9.996    \u001b[39m | \u001b[39m1.029    \u001b[39m |\n",
            "| \u001b[39m24       \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m0.01371  \u001b[39m | \u001b[39m1.973    \u001b[39m |\n",
            "| \u001b[39m25       \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m9.999    \u001b[39m | \u001b[39m1.928    \u001b[39m |\n",
            "=================================================\n",
            "Best Parameters: C=3.7516557872851513, penalty=l1\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression(C=3.7516557872851513, class_weight='balanced', max_iter=1000,\n",
              "                   penalty='l1', random_state=42, solver='liblinear')"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(C=3.7516557872851513, class_weight=&#x27;balanced&#x27;, max_iter=1000,\n",
              "                   penalty=&#x27;l1&#x27;, random_state=42, solver=&#x27;liblinear&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>LogisticRegression</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LogisticRegression.html\">?<span>Documentation for LogisticRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression(C=3.7516557872851513, class_weight=&#x27;balanced&#x27;, max_iter=1000,\n",
              "                   penalty=&#x27;l1&#x27;, random_state=42, solver=&#x27;liblinear&#x27;)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Fungsi untuk evaluasi model KNN dengan cross-validation\n",
        "def knn_cv(n_neighbors, p):\n",
        "    # Konversi parameter ke bentuk integer\n",
        "    n_neighbors = int(n_neighbors)\n",
        "    p = int(p)\n",
        "\n",
        "    # Inisialisasi model KNN\n",
        "    knn_model = KNeighborsClassifier(\n",
        "        n_neighbors=n_neighbors,\n",
        "        p=p,  # Parameter untuk menentukan metrik jarak: 1 untuk Manhattan, 2 untuk Euclidean\n",
        "        weights='uniform'  # Bobot sama untuk semua tetangga\n",
        "    )\n",
        "\n",
        "    # Stratified K-Fold\n",
        "    stratified_kf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n",
        "\n",
        "    # Hitung skor cross-validation\n",
        "    scores = cross_val_score(knn_model, X_train, y_train, cv=stratified_kf, scoring=make_scorer(f1_score, average='weighted'))\n",
        "    return scores.mean()\n",
        "\n",
        "# Inisialisasi Bayesian Optimization\n",
        "pbounds = {'n_neighbors': (1, 30), 'p': (1, 2)}  # n_neighbors (1-30), p (1 untuk Manhattan, 2 untuk Euclidean)\n",
        "optimizer_knn = BayesianOptimization(f=knn_cv, pbounds=pbounds, random_state=42, verbose=2)\n",
        "\n",
        "# Optimasi\n",
        "optimizer_knn.maximize(init_points=5, n_iter=20)\n",
        "\n",
        "# Dapatkan parameter terbaik\n",
        "best_params_knn = optimizer_knn.max['params']\n",
        "best_n_neighbors = int(best_params_knn['n_neighbors'])\n",
        "best_p = int(best_params_knn['p'])\n",
        "\n",
        "print(f\"Best Parameters: n_neighbors={best_n_neighbors}, p={best_p}\")\n",
        "\n",
        "# Latih model KNN dengan parameter terbaik\n",
        "best_model_knn = KNeighborsClassifier(\n",
        "    n_neighbors=best_n_neighbors,\n",
        "    p=best_p,\n",
        "    weights='uniform'\n",
        ")\n",
        "best_model_knn.fit(X_train, y_train)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 584
        },
        "id": "yudsI6kVH0ig",
        "outputId": "59e27913-62ba-4333-db3c-241e30f94410"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "|   iter    |  target   | n_neig... |     p     |\n",
            "-------------------------------------------------\n",
            "| \u001b[39m1        \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m11.86    \u001b[39m | \u001b[39m1.951    \u001b[39m |\n",
            "| \u001b[39m2        \u001b[39m | \u001b[39m0.9977   \u001b[39m | \u001b[39m22.23    \u001b[39m | \u001b[39m1.599    \u001b[39m |\n",
            "| \u001b[39m3        \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m5.525    \u001b[39m | \u001b[39m1.156    \u001b[39m |\n",
            "| \u001b[39m4        \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m2.684    \u001b[39m | \u001b[39m1.866    \u001b[39m |\n",
            "| \u001b[39m5        \u001b[39m | \u001b[39m0.9969   \u001b[39m | \u001b[39m18.43    \u001b[39m | \u001b[39m1.708    \u001b[39m |\n",
            "| \u001b[39m6        \u001b[39m | \u001b[39m0.9969   \u001b[39m | \u001b[39m29.99    \u001b[39m | \u001b[39m1.172    \u001b[39m |\n",
            "| \u001b[39m7        \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m8.995    \u001b[39m | \u001b[39m1.988    \u001b[39m |\n",
            "| \u001b[39m8        \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m1.047    \u001b[39m | \u001b[39m1.026    \u001b[39m |\n",
            "| \u001b[39m9        \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m10.38    \u001b[39m | \u001b[39m1.011    \u001b[39m |\n",
            "| \u001b[39m10       \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m3.436    \u001b[39m | \u001b[39m1.004    \u001b[39m |\n",
            "| \u001b[39m11       \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m4.778    \u001b[39m | \u001b[39m1.991    \u001b[39m |\n",
            "| \u001b[39m12       \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m10.5     \u001b[39m | \u001b[39m1.994    \u001b[39m |\n",
            "| \u001b[39m13       \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m7.574    \u001b[39m | \u001b[39m1.019    \u001b[39m |\n",
            "| \u001b[39m14       \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m1.013    \u001b[39m | \u001b[39m1.958    \u001b[39m |\n",
            "| \u001b[39m15       \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m6.833    \u001b[39m | \u001b[39m1.986    \u001b[39m |\n",
            "| \u001b[39m16       \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m12.23    \u001b[39m | \u001b[39m1.0      \u001b[39m |\n",
            "| \u001b[39m17       \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m11.37    \u001b[39m | \u001b[39m1.022    \u001b[39m |\n",
            "| \u001b[39m18       \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m2.005    \u001b[39m | \u001b[39m1.005    \u001b[39m |\n",
            "| \u001b[39m19       \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m8.943    \u001b[39m | \u001b[39m1.019    \u001b[39m |\n",
            "| \u001b[39m20       \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m4.518    \u001b[39m | \u001b[39m1.003    \u001b[39m |\n",
            "| \u001b[39m21       \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m7.831    \u001b[39m | \u001b[39m1.997    \u001b[39m |\n",
            "| \u001b[39m22       \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m3.818    \u001b[39m | \u001b[39m1.991    \u001b[39m |\n",
            "| \u001b[39m23       \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m6.375    \u001b[39m | \u001b[39m1.001    \u001b[39m |\n",
            "| \u001b[39m24       \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m1.731    \u001b[39m | \u001b[39m1.999    \u001b[39m |\n",
            "| \u001b[39m25       \u001b[39m | \u001b[39m0.9992   \u001b[39m | \u001b[39m9.678    \u001b[39m | \u001b[39m1.515    \u001b[39m |\n",
            "=================================================\n",
            "Best Parameters: n_neighbors=11, p=1\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KNeighborsClassifier(n_neighbors=11, p=1)"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-2 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-2 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-2 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-2 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-2 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier(n_neighbors=11, p=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>KNeighborsClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.neighbors.KNeighborsClassifier.html\">?<span>Documentation for KNeighborsClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>KNeighborsClassifier(n_neighbors=11, p=1)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **d. Evaluasi Model Klasifikasi setelah Tuning (Optional)**"
      ],
      "metadata": {
        "id": "hE7pqlEPEYzI"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Berikut adalah rekomendasi tahapannya.\n",
        "1. Gunakan model dengan hyperparameter terbaik.\n",
        "2. Hitung ulang metrik evaluasi untuk melihat apakah ada peningkatan performa."
      ],
      "metadata": {
        "id": "feaPESoeN0zz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Prediksi pada data train dan test\n",
        "y_train_pred_lr_new = best_model_lr.predict(X_train)\n",
        "y_test_pred_lr_new = best_model_lr.predict(X_test)\n",
        "\n",
        "# Evaluasi pada data train\n",
        "accuracy_train_lr_new = accuracy_score(y_train, y_train_pred_lr_new)\n",
        "precision_train_lr_new = precision_score(y_train, y_train_pred_lr_new, average='weighted')\n",
        "recall_train_lr_new = recall_score(y_train, y_train_pred_lr_new, average='weighted')\n",
        "f1_train_lr_new = f1_score(y_train, y_train_pred_lr_new, average='weighted')\n",
        "\n",
        "# Evaluasi pada data test\n",
        "accuracy_test_lr_new = accuracy_score(y_test, y_test_pred_lr_new)\n",
        "precision_test_lr_new = precision_score(y_test, y_test_pred_lr_new, average='weighted')\n",
        "recall_test_lr_new = recall_score(y_test, y_test_pred_lr_new, average='weighted')\n",
        "f1_test_lr_new = f1_score(y_test, y_test_pred_lr_new, average='weighted')\n",
        "\n",
        "# Print hasil evaluasi\n",
        "print(\"Logistic Regression - Train Data:\")\n",
        "print(f\"Accuracy: {accuracy_train_lr_new}\")\n",
        "print(f\"Precision: {precision_train_lr_new}\")\n",
        "print(f\"Recall: {recall_train_lr_new}\")\n",
        "print(f\"F1-score: {f1_train_lr_new}\\n\")\n",
        "\n",
        "print(\"Logistic Regression - Test Data:\")\n",
        "print(f\"Accuracy: {accuracy_test_lr_new}\")\n",
        "print(f\"Precision: {precision_test_lr_new}\")\n",
        "print(f\"Recall: {recall_test_lr_new}\")\n",
        "print(f\"F1-score: {f1_test_lr_new}\\n\")\n",
        "\n",
        "# Confusion Matrix untuk Test data\n",
        "cm_lr_test = confusion_matrix(y_test, y_test_pred_lr_new)\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.heatmap(cm_lr_test, annot=True, fmt='d', cmap='Blues')\n",
        "plt.title('Confusion Matrix - Logistic Regression (Test Data)')\n",
        "plt.xlabel('Predicted')\n",
        "plt.ylabel('Actual')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "HTXZRvEeNMb1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 772
        },
        "outputId": "a04a7f0a-5aee-400f-f14b-63759667dc44"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Logistic Regression - Train Data:\n",
            "Accuracy: 0.9992348890589136\n",
            "Precision: 0.9992358662120949\n",
            "Recall: 0.9992348890589136\n",
            "F1-score: 0.9992347688174404\n",
            "\n",
            "Logistic Regression - Test Data:\n",
            "Accuracy: 1.0\n",
            "Precision: 1.0\n",
            "Recall: 1.0\n",
            "F1-score: 1.0\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Prediksi pada data train dan test\n",
        "y_train_pred_knn_new = best_model_knn.predict(X_train)\n",
        "y_test_pred_knn_new = best_model_knn.predict(X_test)\n",
        "\n",
        "# Evaluasi pada data train\n",
        "accuracy_train_knn_new = accuracy_score(y_train, y_train_pred_knn_new)\n",
        "precision_train_knn_new = precision_score(y_train, y_train_pred_knn_new, average='weighted')\n",
        "recall_train_knn_new = recall_score(y_train, y_train_pred_knn_new, average='weighted')\n",
        "f1_train_knn_new = f1_score(y_train, y_train_pred_knn_new, average='weighted')\n",
        "\n",
        "# Evaluasi pada data test\n",
        "accuracy_test_knn_new = accuracy_score(y_test, y_test_pred_knn_new)\n",
        "precision_test_knn_new = precision_score(y_test, y_test_pred_knn_new, average='weighted')\n",
        "recall_test_knn_new = recall_score(y_test, y_test_pred_knn_new, average='weighted')\n",
        "f1_test_knn_new = f1_score(y_test, y_test_pred_knn_new, average='weighted')\n",
        "\n",
        "# Print hasil evaluasi\n",
        "print(\"K-Nearest Neighbors - Train Data:\")\n",
        "print(f\"Accuracy: {accuracy_train_knn_new}\")\n",
        "print(f\"Precision: {precision_train_knn_new}\")\n",
        "print(f\"Recall: {recall_train_knn_new}\")\n",
        "print(f\"F1-score: {f1_train_knn_new}\\n\")\n",
        "\n",
        "print(\"K-Nearest Neighbors - Test Data:\")\n",
        "print(f\"Accuracy: {accuracy_test_knn_new}\")\n",
        "print(f\"Precision: {precision_test_knn_new}\")\n",
        "print(f\"Recall: {recall_test_knn_new}\")\n",
        "print(f\"F1-score: {f1_test_knn_new}\\n\")\n",
        "\n",
        "# Confusion Matrix untuk Test data\n",
        "cm_knn_test = confusion_matrix(y_test, y_test_pred_knn_new)\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.heatmap(cm_knn_test, annot=True, fmt='d', cmap='Blues')\n",
        "plt.title('Confusion Matrix - K-Nearest Neighbors (Test Data)')\n",
        "plt.xlabel('Predicted')\n",
        "plt.ylabel('Actual')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 772
        },
        "id": "7juvS8LGMcvf",
        "outputId": "d6e96b3a-c907-4c11-8376-6c54815ca238"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "K-Nearest Neighbors - Train Data:\n",
            "Accuracy: 0.9992348890589136\n",
            "Precision: 0.9992358662120949\n",
            "Recall: 0.9992348890589136\n",
            "F1-score: 0.9992347688174404\n",
            "\n",
            "K-Nearest Neighbors - Test Data:\n",
            "Accuracy: 1.0\n",
            "Precision: 1.0\n",
            "Recall: 1.0\n",
            "F1-score: 1.0\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **e. Analisis Hasil Evaluasi Model Klasifikasi**"
      ],
      "metadata": {
        "id": "ZRsOdm4uEgAW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "* Tidak ada perubahan signifikan pada hasil evaluasi Logistic Regression sebelum dan setelah tuning. Model sudah menunjukkan performa yang sangat baik baik pada data train maupun test sejak awal. Tuning hyperparameter tidak meningkatkan hasil karena model sudah sangat optimal pada dataset kecil ini.\n",
        "* Setelah tuning, KNN menunjukkan performa yang sangat baik pada data test dengan nilai 1.0 di semua metrik, mengindikasikan bahwa model lebih optimal setelah dilakukan tuning dibandingkan sebelumnya."
      ],
      "metadata": {
        "id": "Hm3BhSi6N4_l"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Model Logistic Regression:**\n",
        "- Overfitting: Karena data sangat kecil dan model Logistic Regression memiliki hasil yang sangat baik pada data test (nilai 1.0 di semua metrik), ini bisa jadi indikasi overfitting pada data tersebut. Model ini mungkin sangat cocok untuk data kecil ini, tetapi hasilnya belum tentu berlaku untuk dataset yang lebih besar dan kompleks.\n",
        "- Tidak ada masalah signifikan pada precision atau recall karena nilai keduanya sangat tinggi untuk semua kelas. Tidak ada kelas yang secara khusus mengalami masalah dalam pengenalan."
      ],
      "metadata": {
        "id": "DCqThvdPN5QE"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Model KNN:**\n",
        "- Sebelum tuning, KNN menunjukkan sedikit perbedaan antara data train dan test, dengan metrik evaluasi sedikit lebih rendah pada data test dibandingkan dengan data train. Hal ini bisa menunjukkan sedikit overfitting pada data train, meskipun hasilnya masih sangat baik.\n",
        "- Setelah tuning, hasilnya meningkat ke 1.0 di semua metrik, yang menunjukkan bahwa tuning hyperparameter dapat mengurangi overfitting dan memperbaiki generalisasi model ke data test.\n",
        "General Observation:"
      ],
      "metadata": {
        "id": "HK-ieYHLOCWz"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Rekomendasi:**\n",
        "* Mengumpulkan Data Tambahan:\n",
        "Untuk meningkatkan generalisasi, mengumpulkan data tambahan akan membantu model untuk menghindari overfitting dan memberikan pemahaman yang lebih baik mengenai performa model pada data yang lebih besar\n",
        "* Feature Engineering:\n",
        "Melakukan feature engineering untuk memperkaya informasi yang dapat digunakan oleh model bisa meningkatkan performa. Misalnya, menambahkan interaksi antar fitur atau mengubah data menjadi bentuk yang lebih berguna bagi model.\n",
        "* Menggunakan Model Lain:\n",
        "Meskipun Logistic Regression dan KNN menunjukkan performa yang sangat baik, mengeksplorasi model lain bisa membantu untuk menemukan model yang lebih efektif atau lebih stabil pada data besar dan lebih kompleks."
      ],
      "metadata": {
        "id": "9b16ErT9OE3D"
      }
    }
  ]
}
